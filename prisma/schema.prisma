// File: prisma/schema.prisma

// 1. Tentukan provider database Anda
// Gunakan "postgresql" jika Anda memakai Neon/Supabase
// Gunakan "mysql" jika Anda memakai PlanetScale
datasource db {
  provider     = "postgresql" // atau "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

// 2. Ini adalah SKEMA WAJIB untuk NextAuth.js Adapter
// Jangan ubah nama model atau bidang ini

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  watchHistory  WatchHistory[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model WatchHistory {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Info anime yang ditonton
  animeId   String   // ID unik dari anime, misal: "jujutsu-kaisen"
  episodeId String   // ID unik dari episode, misal: "episode-1"
  title     String?  // Judul anime/episode untuk ditampilkan
  image     String?  // URL gambar anime

  watchedAt DateTime @updatedAt // Waktu terakhir ditonton (otomatis update)

  // Mencegah duplikat: satu user hanya punya satu riwayat per episode
  @@unique([userId, episodeId])
}
